<?xml version="1.0" encoding="UTF-8"?>
<!--
 * This file is part of Webtemplate.
 *
 * (c) Sandy McNeil <g7mzr35@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
-->
<project name="webtemplate" default="build" basedir="." description="Phing Buildfile.">

    <!-- Set up default directories -->
    <property name="basedir" value="${project.basedir}" />
    <property name="toolsdir" value="${basedir}/vendor/bin/"/>

    <!-- The default location for the compser phar -->
    <property name="composer" value="${basedir}/build/composer.phar"/>


    <!-- ================================================================== -->
    <!--                 Targets to Setup the Build Tools                   -->
    <!-- ================================================================== -->

    <target name="php-check">
        <condition property="php" value="php">
            <not>
                <isset property="${php}"/>
            </not>
        </condition>
    </target>

    <target name="composer-check">
        <available file="${composer}" property="composer.present"/>
    </target>

    <target name="composer-download"
            depends="composer-check"
            unless="composer.present">
        <property name="composer.noselfupdate" value="true"/>
        <exec executable="wget" dir="${builddir}" passthru="true" logoutput="true">
            <arg line="https://getcomposer.org/composer.phar" />
        </exec>
    </target>

    <target name="composer-selfupdate"
            depends="php-check,composer-download"
            unless="composer.noselfupdate">
        <exec executable="${php}">
            <arg value="${composer}"/>
            <arg value="self-update"/>
            <arg value="--quiet"/>
        </exec>
    </target>
<!-- Install or Update the Dependancies -->
    <target name="composer-install"
            depends="composer-selfupdate"
            description="Installing composer dependencies">
        <exec executable="php" passthru="true" logoutput="true">
            <arg value="${composer}" />
            <arg value="install" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />
        </exec>
    </target>

    <target name="composer-update"
            depends="composer-selfupdate"
            description="Manual update composer dependencies">
        <exec executable="php" passthru="true" logoutput="true">
            <arg value="${composer}" />
            <arg value="update" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />
        </exec>
    </target>


    <!-- ================================================================== -->
    <!--             Targets used to CLEAN the BUILD ENVIRONMENT            -->
    <!-- ================================================================== -->
    <target name="clean-artifacts">
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <!--<delete dir="${basedir}/vendor"/> -->
        <delete file="${basedir}/configs/preferences.json" />
        <delete>
            <fileset dir="${basedir}/templates_c" includes="**/*.php" />
        </delete>
        <property name="clean.done" value="true"/>
    </target>

    <target name="clean-docs">
        <exec executable="php" dir="${basedir}/base/docs" passthru="true" logoutput="true">
            <arg line="makedocs.php --clean" />
        </exec>
    </target>

    <target name="clean-config" unless="functional.set" description="Delete Config files">
        <delete file="${basedir}/configs/parameters.json" />
    </target>


    <!-- ================================================================== -->
    <!--           Targets used to PREPARE the BUILD ENVIRONMENT            -->
    <!-- ================================================================== -->


    <target name="db-update">
        <exec executable="php" dir="${basedir}" logoutput="true">
            <arg line="install.php --unit-test" />
        </exec>
    </target>

    <target name="prepare-build"
            unless="prepare.done"
            depends="composer-install, clean, db-update"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <chmod file="${basedir}/configs" mode="0775">
            <fileset dir="${basedir}/configs">
                <include name="**/*.json"/>
            </fileset>
        </chmod>
        <chmod file="${basedir}/logs" mode="0775">
            <fileset dir="${basedir}/logs">
                <include name="**/*"/>
            </fileset>
        </chmod>
        <chmod file="${basedir}/templates_c" mode="0775">
            <fileset dir="${basedir}/templates_c">
                <include name="**/*.php"/>
            </fileset>
        </chmod>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- ================================================================== -->
    <!--                      Code Analysis Targets                         -->
    <!-- ================================================================== -->

    <!-- ===                     MANUAL TARGETS                         === -->
    <target name="phpcs"
        description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec passthru="true" logoutput="true" executable="${toolsdir}phpcs">
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php " />
            <arg path="${basedir}" />
         </exec>
    </target>

    <target name="phpcbf"
            description="Fix coding standard violations using PHP_CodeSniffer.">
        <exec executable="${toolsdir}phpcbf" passthru="true" logoutput="true">
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <!-- ===                     CI TARGETS                            === -->

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/phpcs.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
        <arg path="${basedir}" />
       </exec>
    </target>

    <!-- ===                  COMBINED TARGETS                         === -->

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/includes">
                <include name="**/*.php" />
            </fileset>

            <fileset dir="${basedir}/base">
                <include name="**/*.php" />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
            </fileset>
        </apply>
    </target>

    <!-- ================================================================== -->
    <!--                        Unit Testing Targets                        -->
    <!-- ================================================================== -->

    <target name="unit"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" checkreturn="true" passthru="true" logoutput="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--testsuite" />
            <arg value="unit" />
            <arg value="--bootstrap" />
            <arg value="vendor/autoload.php" />
        </exec>
    </target>


    <!-- ================================================================== -->
    <!--                  Functional Testing Targets                        -->
    <!-- ================================================================== -->

    <target name="functional-check">
        <property name="functional.set" value="true"/>
    </target>

    <target name="functional"
            depends="composer-install, functional-check, db-update"
            description="Run user interface tests with PHPUnit and Selenium Webdriver">
        <exec executable="${toolsdir}phpunit" checkreturn="true" passthru="true" logoutput="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--testsuite" />
            <arg value="functional" />
        </exec>
    </target>

    <target name="restapi"
            depends="composer-install, functional-check, db-update"
            description="Run RestFul interface tests with PHPUnit and RESTclient">
        <exec executable="${toolsdir}phpunit" checkreturn="true" passthru="true" logoutput="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--testsuite" />
            <arg value="restapi" />
        </exec>
    </target>


    <!-- ================================================================== -->
    <!--                       Documentation Targets                        -->
    <!-- ================================================================== -->

    <target name="make-docs">
        <exec executable="php" dir="${basedir}/base/docs" passthru="true" logoutput="true">
            <arg line="makedocs.php --with-develop" />
        </exec>
    </target>

    <!-- ================================================================== -->
    <!--                          Build Targets                             -->
    <!-- ================================================================== -->

    <target name="clean"
            depends="composer-install, clean-artifacts, clean-docs, clean-config"/>

    <target name="prepare"
            depends=" clean, db-update, prepare-build"/>

    <target name="code-analysis"
            depends="lint, phpcs-ci"/>

    <target name="unit-test"
            depends="prepare, unit"/>

    <target name="functional-test"
            depends="prepare, functional-check, db-update, functional"/>

    <!-- Default Build Target -->
    <target name="build"
            depends="composer-install, clean, prepare, code-analysis, unit-test"/>

</project>
